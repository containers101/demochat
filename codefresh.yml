version: '1.0'
steps:
  build_step:
    title: Build
    type: build
    dockerfile: Dockerfile
    image_name: demochat
    tag: '${{CF_BRANCH}}'

#  unit_tests:
#    title: Unit Tests
#    image: ${{build_step}}
#    fail_fast: false
#    working-directory : /usr/src/app
#    commands:
#      - npm test

  unit_test:
    type: composition
    working_directory: '${{main_clone}}'
    composition:
      version: '2'
      services:
        mongo:
          image: 'mongo:latest'
          ports:
            - 27017
    composition_candidates:
      test:
        image: '${{build_step}}'
        command: npm test

  TwistlockScanImage:
    type: composition
    composition:
      version: '2'
      services:
        targetimage:
          image: ${{build_step}} # Must be the Docker build step name
          command: sh -c "exit 0"
          labels:
            build.image.id: ${{CF_BUILD_ID}} # Provides a lookup for the composition
    composition_candidates:
      scan_service:
        image: codefresh/docker-twistcli:latest # Recommend replacing with current Twistlock Console version
        environment: # Add only the Environment Variables you need
          - CODEFRESH_CLI_KEY=${{CODEFRESH_CLI_KEY}} # Required
          - CONSOLE_HOSTNAME=${{CONSOLE_HOSTNAME}} # Required
          - CONSOLE_PORT=${{CONSOLE_PORT}} # Required
          - CONSOLE_USERNAME=${{CONSOLE_USERNAME}} # Required
          - CONSOLE_PASSWORD=${{CONSOLE_PASSWORD}} # Required
          - DETAILS=true
        command: python /twistlock-cli.py "docker inspect $$(docker inspect $$(docker ps -aqf label=build.image.id=${{CF_BUILD_ID}}) -f {{.Config.Image}}) -f {{.Id}} | sed 's/sha256://g'"
        depends_on:
          - targetimage
        volumes: # Volumes required to run DIND
          - /var/run/docker.sock:/var/run/docker.sock
          - /var/lib/docker:/var/lib/docker
    add_flow_volume_to_composition: true
    on_success: # Execute only once the step succeeded
      metadata: # Declare the metadata attribute
        set: # Specify the set operation
          - ${{build_step.imageId}}: # Select any number of target images
            - SECURITY_SCAN: true

    on_fail: # Execute only once the step failed
      metadata: # Declare the metadata attribute
        set: # Specify the set operation
          - ${{build_step.imageId}}: # Select any number of target images
            - SECURITY_SCAN: false

  push_to_registry:
    title: Push To Registry
    type: push
    candidate: ${{build_step}}
    tag: ${{CF_BRANCH}}

  deploy_to_ecs:
    title: Deploy Container to ECS
    image: codefresh/cf-deploy-ecs
    commands:
      - >-
        cfecs-update --image-name containers101/demochat --image-tag
        ${{CF_BRANCH}} eu-west-1 demochat-production demochat-service
    environment:
      - 'AWS_ACCESS_KEY_ID=${{AWS_ACCESS_KEY_ID}}'
      - 'AWS_SECRET_ACCESS_KEY=${{AWS_SECRET_ACCESS_KEY}}'
    when:
      condition:
        all:
          deploy_to_ecs: '"${{DEPLOY_ECS}}" == "true"'

  deploy_to_kubernetes:
    image: codefresh/cf-deploy-kubernetes
    tag: latest
    working_directory: ${{main_clone}}
    commands:
      - /cf-deploy-kubernetes deployment.yml
    environment:
      - KUBERNETES_USER=${{KUBERNETES_USER}}
      - KUBERNETES_PASSWORD=${{KUBERNETES_PASSWORD}}
      - KUBERNETES_SERVER=${{KUBERNETES_SERVER}}
      - DOCKER_IMAGE_TAG=${{CF_BRANCH}}
    when:
      condition:
        all:
          deploy_to_kubernetes: '"${{DEPLOY_KUBERNETES}}" == "true"'
